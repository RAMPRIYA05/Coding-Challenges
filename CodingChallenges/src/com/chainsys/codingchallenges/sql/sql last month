                                        SQL
1.Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA.
The CITY table is described as follows:
CITY.jpg
Field                           Type
ID                                NUMBER
NAME                        VARCHAR(17)
COUNTRYCODE        VARCHAR(3)
DISTRICT                   VARCHAR(20)
POPULATION             NUMBER
QUERY:
SELECT * FROM CITY WHERE COUNTRYCODE = 'USA' AND POPULATION > 100000;


2.Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA.
The CITY table is described as follows:
QUERY:
SELECT NAME FROM CITY WHERE COUNTRYCODE = 'USA' AND POPULATION > 120000;


3.Query all columns (attributes) for every row in the CITY table.
The CITY table is described as follows:
QUERY:
SELECT * FROM CITY;


4.Query all columns for a city in CITY with the ID 1661.
The CITY table is described as follows:
QUERY:
SELECT * FROM CITY WHERE ID = 1661; 


5.Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.
The CITY table is described as follows:
QUERY:
SELECT * FROM CITY WHERE COUNTRYCODE = 'JPN';        


6.Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.
The CITY table is described as follows:
QUERY:
SELECT  NAME  FROM CITY WHERE COUNTRYCODE = 'JPN'; 


7.Query a list of CITY and STATE from the STATION table.
The STATION table is described as follows:
Field                           Type
ID                                NUMBER
CITY                            VARCHAR2(21)
STATE                         VARCHAR2(21)
LAT_N                        NUMBER
LONG_W                    NUMBER
QUERY:
SELECT CITY,STATE FROM STATION;


8.Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.
where LAT_N is the northern latitude and LONG_W is the western longitude.
For example, if there are three records in the table with CITY values 'New York', 'New York', 'Bengalaru', there are 2 different city names: 'New York' and 'Bengalaru'. The query returns , because .
QUERY:
SELECT  (COUNT(CITY)-COUNT(DISTINCT CITY)) AS DIFFERENCE FROM STATION;


9.Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.
The STATION table is described as follows:
where LAT_N is the northern latitude and LONG_W is the western longitude.
Sample Input
For example, CITY has four entries: DEF, ABC, PQRS and WXY.
Sample Output
ABC 3
PQRS 4
Explanation
When ordered alphabetically, the CITY names are listed as ABC, DEF, PQRS, and WXY, with lengths  and . The longest name is PQRS, but there are  options for shortest named city. Choose ABC, because it comes first alphabetically.
Note
You can write two separate queries to get the desired output. It need not be a single query.

QUERY:
SELECT CITY, LENGTH(CITY) FROM STATION ORDER BY LENGTH(CITY), CITY LIMIT 1;
SELECT CITY,  LENGTH(CITY)FROM STATION ORDER BY LENGTH(CITY) DESC, CITY LIMIT 1;


10.Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.
Input Format
The STUDENTS table is described as follows:
COLUMN                        Type
ID                                NUMBER
NAME                        STRING
MARKS                       INTEGER
The Name column only contains uppercase (A-Z) and lowercase (a-z) letters.
Sample Input
ID              NAME                 MARKS
1               Ashley                   81   
2                 Samantha           75
3                Julia                     76                
4                Belvet                  84
Sample Output
Ashley
Julia
Belvet
Explanation
Only Ashley, Julia, and Belvet have Marks > . If you look at the last three characters of each of their names, there are no duplicates and 'ley' < 'lia' < 'vet'.

QUERY:
SELECT NAME FROM STUDENTS WHERE MARKS> 75 ORDER BY RIGHT(NAME, 3), ID;


11.Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.
The Employee table containing employee data for a company is described as follows:
where employee_id is an employee's ID number, name is their name, months is the total number of months they've been working for the company, and salary is their monthly salary.
Input Format
COLUMN                  TYPE
employee_id            Integer
name                        String
months                     Ingeter
salary                       Integer
Sample Input
 
Sample Output
Angela
Bonnie
Frank
Joe
Kimberly
Lisa
Michael
Patrick
Rose
Todd
QUERY:
SELECT NAME  FROM EMPLOYEE  NAME ORDER BY NAME ASC;


